"""
View –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞ face swap.
–°—Ç–∏–ª—å RecallDev: —Ç–æ–ª—å–∫–æ import module, type hints, docstrings, flat code.
"""

import logging
import os

import src.bot.flows.face_swap_flow as face_swap_flow
import src.constants.constants as constants
import src.constants.texts as texts
import src.db.services as db_services
import src.utils as utils
from telegram_rest_mvc import views

logger = logging.getLogger(__name__)


class HandlePhotoView(views.View):
    """
    View-–∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ face swap —á–µ—Ä–µ–∑ flow.
    SOLID: —Ç–æ–ª—å–∫–æ —Ä–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—Å—è –ª–æ–≥–∏–∫–∞ ‚Äî –≤–æ flow.
    """

    async def command(self) -> None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑—ã–≤–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É face_swap_flow –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –õ–æ–≥–∏—Ä—É–µ—Ç —ç—Ç–∞–ø—ã.
        """
        user_id = getattr(self.update.effective_user, "id", None)
        logger.info("HandlePhotoView.command –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id=%s", user_id)
        try:
            message = utils.get_effective_message(self.update, self.context)
            imgbb_api_key = os.environ.get("IMGBB_API_KEY")
            maxstudio_api_key = os.environ.get("MAXSTUDIO_API_KEY")
            logger.info("–ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤–æ flow: user_id=%s", user_id)
            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ –≤ bot.py
            await self.update.message.reply_text("–ó–∞–≥—Ä—É–∂–∞—é –º–µ–º –∏ —Ç–≤–æ—ë —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä... üèãÔ∏è‚Äç‚ôÇÔ∏è")
            result = await face_swap_flow.face_swap_flow(
                update=self.update,
                context=self.context,
                user_id=user_id,
                imgbb_api_key=imgbb_api_key,
                maxstudio_api_key=maxstudio_api_key,
            )
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã flow: %s", result)
            if result.get("stage_msgs"):
                for msg in result["stage_msgs"]:
                    await self.update.message.reply_text(msg)
            if result["status"] == "ok":
                from src.bot.flows.sticker_set_flow import create_or_add_sticker_to_set
                bot_username = (await self.context.bot.get_me()).username
                username = getattr(self.update.effective_user, "username", None)
                sticker_url = await create_or_add_sticker_to_set(
                    context=self.context,
                    update=self.update,
                    user_id=user_id,
                    username=username,
                    bot_username=bot_username,
                    sticker_path=result["sticker_path"],
                )
                await self.update.message.reply_sticker(result["sticker_path"])
                await self.update.message.reply_text(f"–¢–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: {sticker_url}")
                logger.info("–°—Ç–∏–∫–µ—Ä –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            else:
                await self.update.message.reply_text(result["error"])
                logger.warning("–û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ flow: %s", result["error"])
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ HandlePhotoView.command: %s", e)
            await self.update.message.reply_text(texts.FACE_SWAP_FAIL)


    async def add_sticker(self, context, user_id, set_name, sticker_path, update):
        from telegram import InputSticker

        # Removed direct imports; use texts.STICKER_ADDED and texts.STICKER_ADD_ERR below
        with open(sticker_path, "rb") as sticker_file:
            sticker = InputSticker(
                sticker=sticker_file, emoji_list=["üí™"], format="static"
            )
            try:
                await context.bot.add_sticker_to_set(
                    user_id=user_id, name=set_name, sticker=sticker
                )
                await self.update.message.reply_text(texts.STICKER_ADDED(set_name))
                print(f"[DEBUG] –°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–∫: {set_name}")
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞: {e}")
                await self.update.message.reply_text(texts.STICKER_ADD_ERR(e))
